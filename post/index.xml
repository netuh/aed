<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Aulas on Algoritmo e Estrurura de Dados</title><link>https://netuh.github.io/aed/post/</link><description>Recent content in Aulas on Algoritmo e Estrurura de Dados</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 21 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://netuh.github.io/aed/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Estrutura de Dados</title><link>https://netuh.github.io/aed/post/aula04/</link><pubDate>Thu, 21 Jul 2022 00:00:00 +0000</pubDate><guid>https://netuh.github.io/aed/post/aula04/</guid><description>Estrutura de Dados Na ciência da computação, uma estrutura de dados é uma forma de organização, gerenciamento e armazenamento de dados de forma a dar um acesso eficiente a dados Mais precisamente, uma estrutura de dados é uma coleção de valores de dados, os relacionamentos entre eles e as funções (ou operações) que podem ser aplicadas esses dados.
As Estruturas de dados mais elementares possuem dois tipos de operações: Consultivas e Modificadoras.</description></item><item><title>Estrutura de Dados</title><link>https://netuh.github.io/aed/post/aula05/</link><pubDate>Thu, 21 Jul 2022 00:00:00 +0000</pubDate><guid>https://netuh.github.io/aed/post/aula05/</guid><description>Pilha e Fila Filas e pilhas são estruturas usualmente implementadas através de listas (que podem ser tanto a implementação com Listas de Array ou com Listas Ligadas), retringindo a política de manipulação dos elementos da lista.
Fila Uma fila (queue) tipicamente estabelece uma política FIFO &amp;ndash; first in, first out &amp;ndash; de acesso aos dados. Em outras palavras, a ordem estabelecida na lista é a ordem de inserção. No momento de retirar um nó da lista, o nó mais antigo (o primeiro que entrou) é o primeiro a ser retirado.</description></item><item><title>Análise assintótica</title><link>https://netuh.github.io/aed/post/aula03/</link><pubDate>Tue, 05 Jul 2022 00:00:00 +0000</pubDate><guid>https://netuh.github.io/aed/post/aula03/</guid><description>Análise Assintótica A análise assintótica de um algoritmo refere-se à definição do limite/enquadramento matemático de seu desempenho em tempo de execução. Usando a análise assintótica, podemos definir o melhor caso, o caso médio e o pior cenário de um algoritmo.
Um exemplo que foi analisado é o seguinte:
public class Main{ public static double encontra(int[] var){ for (int i = 0; i &amp;lt; 5; i++){ if (var[i] == 5) { return 0; } } return -1; } } Lembrando que a linha primeira linha do método encontra:</description></item><item><title>Orientação a Objetos</title><link>https://netuh.github.io/aed/post/aula02/</link><pubDate>Thu, 30 Jun 2022 00:00:00 +0000</pubDate><guid>https://netuh.github.io/aed/post/aula02/</guid><description>Orientação a Objetos A programação orientada a objetos (POO) é um paradigma de programação baseado no conceito de objetos, onde os objetos são instâncias de classes. Classes contêm dados e comportamentos: dados na forma de campos (geralmente conhecidos como atributos ou propriedades) e comportamento na forma de funções (muitas vezes conhecido como métodos).
Exemplo, um código que calcula a distância entre dois pontos.
.
Como sabemos, de acordo com fórmula:</description></item><item><title>Boas vindas</title><link>https://netuh.github.io/aed/post/aula01/</link><pubDate>Tue, 05 Mar 2019 00:00:00 +0000</pubDate><guid>https://netuh.github.io/aed/post/aula01/</guid><description>Sejam bem-vindos, Aqui vou publicar os exercícios e as aulas. Mas não se esqueçam do que Steve Jobs disse:
&amp;ldquo;Computers themselves, and software yet to be developed, will revolutionize the way we learn.&amp;rdquo;</description></item></channel></rss>